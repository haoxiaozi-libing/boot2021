可重入锁：一个线程获取到方法外部的锁之后可以自动获取内部锁（同一把锁），不必释放锁。
ReentrantLock和sync都是可重入锁。
重入锁的种类：
    隐式锁（sync）和显示锁（lock）。

可重入锁实现机制：
    每个锁对象拥有一个锁计数器和一个指向持有该锁的线程的指针，当执行monitorenter时，如果目标锁对象的计数器为零，那么说明它没有被其他线程所持有，Java虚拟机会将该锁对象的持有线程设置为当前线程，并且将其计数器加1，
    在目标锁对象的计数器不为零的情况下，如果锁对象的持有线程是当前线程，那么Java虚拟机可以将其计数器加1，否则需要等待，直至持有线程释放该锁
    当执行monitorexit时，Java虚拟机则需将锁对象的计数器减1。计数器为零代表锁已被释放。


LockSupport是用来创建锁和其他同步类的基本线程的阻塞原语。
    park():阻塞线程
    unpark()：解除阻塞线程

 Object：wait和notify,必须和sync一起用，要先wait然后notify
 Condition：await和signleIn，依赖Lock
 小结：传统先等待然后唤醒，线程要获得锁，要有依赖
 LockSupport:park和unpark

































